generator client {
  provider = "dart run orm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String
  fullname  String?
  email     String   @unique
  cpf       String?
  password  String
  role      UserRole @default(user)
  devices   Device[]
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
}

model Device {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deviceId    String
  platform    String?
  fcmToken    String?
  locale      String?
  buildNumber Int?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Store {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  storeId    String
  storeTitle String
  users      User[]
  categories Category[]
}

model Category {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  priority  Int
  visible   Boolean   @default(true)
  image     String
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String
  products  Product[]
}

model Product {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  description     String
  priority        Int
  visible         Boolean   @default(true)
  image           String
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String
  subProducts     Product[] @relation("subProducts")
  productParent   Product?  @relation("subProducts", fields: [productParentId], references: [id])
  productParentId String
}

model Group {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String?
  priority    Int
  qtyMax      Int
  qtyMin      Int
  exibition   Exibition
  complements Complement[]
}

model Complement {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  priority    Int
  group       Group    @relation(fields: [grupoId], references: [id])
  grupoId     String
  price       Float
  qtyMax      Int
}

enum UserRole {
  admin
  user
  manager
}

enum Exibition {
  radio
  check
  quantity
  button
}
